// Auto-generated by zimic.
// NOTE: Do not manually edit this file. Changes will be overridden.

import type { HttpSchema, HttpSearchParamsSerialized } from "zimic/http";

export type AutocompleteServiceSchema = HttpSchema<{
  "/details/json": {
    /** @description The Places API is a service that returns information about places using HTTP requests. Places are defined within this API as establishments, geographic locations, or prominent points of interest. */
    GET: AutocompleteServiceOperations["placeDetails"];
  };
  "/findplacefromtext/json": {
    /** @description A Find Place request takes a text input and returns a place. The input can be any kind of Places text data, such as a name, address, or phone number. The request must be a string. A Find Place request using non-string data such as a lat/lng coordinate or plus code generates an error.
     *     <div class="note">Note: If you omit the fields parameter from a Find Place request, only the place_id for the result will be returned.</div>
     *      */
    GET: AutocompleteServiceOperations["findPlaceFromText"];
  };
  "/nearbysearch/json": {
    /** @description A Nearby Search lets you search for places within a specified area. You can refine your search request by supplying keywords or specifying the type of place you are searching for. */
    GET: AutocompleteServiceOperations["nearbySearch"];
  };
  "/textsearch/json": {
    /** @description The Google Places API Text Search Service is a web service that returns information about a set of places based on a string — for example "pizza in New York" or "shoe stores near Ottawa" or "123 Main Street". The service responds with a list of places matching the text string and any location bias that has been set.
     *
     *     The service is especially useful for making [ambiguous address](https://developers.google.com/maps/documentation/geocoding/best-practices) queries in an automated system, and non-address components of the string may match businesses as well as addresses. Examples of ambiguous address queries are incomplete addresses, poorly formatted addresses, or a request that includes non-address components such as business names.
     *
     *     The search response will include a list of places. You can send a Place Details request for more information about any of the places in the response.
     *      */
    GET: AutocompleteServiceOperations["textSearch"];
  };
  "/photo": {
    /** @description The Place Photo service, part of the Places API, is a read- only API that allows you to add high quality photographic content to your application. The Place Photo service gives you access to the millions of photos stored in the Places database. When you get place information using a Place Details request, photo references will be returned for relevant photographic content. Find Place, Nearby Search, and Text Search requests also return a single photo reference per place, when relevant. Using the Photo service you can then access the referenced photos and resize the image to the optimal size for your application.
     *
     *     Photos returned by the Photo service are sourced from a variety of locations, including business owners and user contributed photos. In most cases, these photos can be used without attribution, or will have the required attribution included as a part of the image. However, if the returned photo element includes a value in the html_attributions field, you will have to include the additional attribution in your application wherever you display the image.
     *      */
    GET: AutocompleteServiceOperations["placePhoto"];
  };
  "/queryautocomplete/json": {
    /** @description The Query Autocomplete service can be used to provide a query prediction for text-based geographic searches, by returning suggested queries as you type.
     *
     *     The Query Autocomplete service allows you to add on-the-fly geographic query predictions to your application. Instead of searching for a specific location, a user can type in a categorical search, such as "pizza near New York" and the service responds with a list of suggested queries matching the string. As the Query Autocomplete service can match on both full words and substrings, applications can send queries as the user types to provide on-the-fly predictions.
     *      */
    GET: AutocompleteServiceOperations["queryAutocomplete"];
  };
  "/autocomplete/json": {
    /** @description The Place Autocomplete service is a web service that returns place predictions in response to an HTTP request. The request specifies a textual search string and optional geographic bounds. The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types.
     *     <div class="note">Note: You can use Place Autocomplete even without a map. If you do show a map, it must be a Google map. When you display predictions from the Place Autocomplete service without a map, you must include the ['Powered by Google'](https://developers.google.com/maps/documentation/places/web-service/policies#logo_requirementshttps://developers.google.com/maps/documentation/places/web-service/policies#logo_requirements) logo.</div>
     *
     *     The Place Autocomplete service can match on full words and substrings, resolving place names, addresses, and plus codes. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.
     *
     *     The returned predictions are designed to be presented to the user to aid them in selecting the desired place. You can send a [Place Details](https://developers.google.com/maps/documentation/places/web-service/details#PlaceDetailsRequests) request for more information about any of the places which are returned.
     *      */
    GET: AutocompleteServiceOperations["autocomplete"];
  };
}>;

export interface AutocompleteServiceComponents {
  schemas: {
    /**
     * Bounds
     * @description A rectangle in geographical coordinates from points at the southwest and northeast corners.
     */
    Bounds: {
      northeast: AutocompleteServiceComponents["schemas"]["LatLngLiteral"];
      southwest: AutocompleteServiceComponents["schemas"]["LatLngLiteral"];
    };
    /**
     * LatLngLiteral
     * @description An object describing a specific location with Latitude and Longitude in decimal degrees.
     */
    LatLngLiteral: {
      /** @description Latitude in decimal degrees */
      lat: number;
      /** @description Longitude in decimal degrees */
      lng: number;
    };
    /** AddressComponent */
    AddressComponent: {
      /**
       * @description The full text description or name of the address component as returned by the Geocoder.
       * @example Council of the City of Sydney
       */
      long_name: string;
      /**
       * @description An abbreviated textual name for the address component, if available. For example, an address component for the state of Alaska may have a long_name of "Alaska" and a short_name of "AK" using the 2-letter postal abbreviation.
       * @example Sydney
       */
      short_name: string;
      /**
       * @description An array indicating the type of the address component. See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).
       * @example [
       *       "administrative_area_level_2",
       *       "political"
       *     ]
       */
      types: string[];
    };
    /**
     * Geometry
     * @description An object describing the location.
     */
    Geometry: {
      location: AutocompleteServiceComponents["schemas"]["LatLngLiteral"];
      viewport: AutocompleteServiceComponents["schemas"]["Bounds"];
    };
    /**
     * PlusCode
     * @description An encoded location reference, derived from latitude and longitude coordinates, that represents an area, 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named).
     */
    PlusCode: {
      /** @description The `compound_code` is a 6 character or longer local code with an explicit location (`CWC8+R9, Mountain View, CA, USA`). Some APIs may return an empty string if the `compound_code` is not available. */
      compound_code?: string;
      /** @description The `global_code` is a 4 character area code and 6 character or longer local code (`849VCWC8+R9`). */
      global_code: string;
    };
    /**
     * Place
     * @description Attributes describing a place. Not all attributes will be available for all place types.
     */
    Place: {
      /** @description An array containing the separate components applicable to this address. */
      address_components?: AutocompleteServiceComponents["schemas"]["AddressComponent"][];
      /**
       * @description A representation of the place's address in the [adr microformat](http://microformats.org/wiki/adr).
       * @example <span class="street-address">48 Pirrama Rd</span>, <span class="locality">Pyrmont</span> <span class="region">NSW</span> <span class="postal-code">2009</span>, <span class="country-name">Australia</span>
       */
      adr_address?: string;
      /**
       * @description Indicates the operational status of the place, if it is a business. If no data exists, `business_status` is not returned.
       *
       * @enum {string}
       */
      business_status?: "OPERATIONAL" | "CLOSED_TEMPORARILY" | "CLOSED_PERMANENTLY";
      /** @description Specifies if the business supports curbside pickup. */
      curbside_pickup?: boolean;
      /** @description Contains the hours of operation for the next seven days (including today). The time period starts at midnight on the date of the request and ends at 11:59 pm six days later. This field includes the `special_days` subfield of all hours, set for dates that have exceptional hours. */
      current_opening_hours?: AutocompleteServiceComponents["schemas"]["PlaceOpeningHours"];
      /** @description Specifies if the business supports delivery. */
      delivery?: boolean;
      /** @description Specifies if the business supports indoor or outdoor seating options. */
      dine_in?: boolean;
      /** @description Contains a summary of the place. A summary is comprised of a textual overview, and also includes the language code for these if applicable. Summary text must be presented as-is and can not be modified or altered. */
      editorial_summary?: AutocompleteServiceComponents["schemas"]["PlaceEditorialSummary"];
      /**
       * @description A string containing the human-readable address of this place.
       *
       *     Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom, do not allow distribution of true postal addresses due to licensing restrictions.
       *
       *     The formatted address is logically composed of one or more address components. For example, the address "111 8th Avenue, New York, NY" consists of the following components: "111" (the street number), "8th Avenue" (the route), "New York" (the city) and "NY" (the US state).
       *
       *     Do not parse the formatted address programmatically. Instead you should use the individual address components, which the API response includes in addition to the formatted address field.
       *
       * @example 48 Pirrama Rd, Pyrmont NSW 2009, Australia
       */
      formatted_address?: string;
      /**
       * @description Contains the place's phone number in its [local format](http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).
       * @example (02) 9374 4000
       */
      formatted_phone_number?: string;
      /** @description Contains the location and viewport for the location. */
      geometry?: AutocompleteServiceComponents["schemas"]["Geometry"];
      /**
       * @description Contains the URL of a suggested icon which may be displayed to the user when indicating this result on a map.
       * @example https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/generic_business-71.png
       */
      icon?: string;
      /** @description Contains the default HEX color code for the place's category. */
      icon_background_color?: string;
      /** @description Contains the URL of a recommended icon, minus the `.svg` or `.png` file type extension. */
      icon_mask_base_uri?: string;
      /**
       * @description Contains the place's phone number in international format. International format includes the country code, and is prefixed with the plus, +, sign. For example, the international_phone_number for Google's Sydney, Australia office is `+61 2 9374 4000`.
       * @example +61 2 9374 4000
       */
      international_phone_number?: string;
      /**
       * @description Contains the human-readable name for the returned result. For `establishment` results, this is usually the canonicalized business name.
       * @example Google Workplace 6
       */
      name?: string;
      /** @description Contains the regular hours of operation. */
      opening_hours?: AutocompleteServiceComponents["schemas"]["PlaceOpeningHours"];
      /**
       * @deprecated
       * @description Use `business_status` to get the operational status of businesses.
       */
      permanently_closed?: boolean;
      /** @description An array of photo objects, each containing a reference to an image. A request may return up to ten photos. More information about place photos and how you can use the images in your application can be found in the [Place Photos](https://developers.google.com/maps/documentation/places/web-service/photos) documentation. */
      photos?: AutocompleteServiceComponents["schemas"]["PlacePhoto"][];
      /**
       * @description A textual identifier that uniquely identifies a place. To retrieve information about the place, pass this identifier in the `place_id` field of a Places API request. For more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).
       * @example ChIJN1t_tDeuEmsRUsoyG83frY4
       */
      place_id?: string;
      /** @description An encoded location reference, derived from latitude and longitude coordinates, that represents an area: 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named). See [Open Location Code](https://en.wikipedia.org/wiki/Open_Location_Code) and [plus codes](https://plus.codes/).
       *      */
      plus_code?: AutocompleteServiceComponents["schemas"]["PlusCode"];
      /** @description The price level of the place, on a scale of 0 to 4. The exact amount indicated by a specific value will vary from region to region. Price levels are interpreted as follows:
       *     - 0 Free
       *     - 1 Inexpensive
       *     - 2 Moderate
       *     - 3 Expensive
       *     - 4 Very Expensive
       *      */
      price_level?: number;
      /**
       * @description Contains the place's rating, from 1.0 to 5.0, based on aggregated user reviews.
       * @example 4.1
       */
      rating?: number;
      /** @deprecated */
      reference?: string;
      /** @description Specifies if the place supports reservations. */
      reservable?: boolean;
      /** @description A JSON array of up to five reviews. By default, the reviews are sorted in order of relevance. Use the `reviews_sort` request parameter to control sorting.
       *
       *     - For `most_relevant` (default), reviews are sorted by relevance; the service will bias the results to return reviews originally written in the preferred language.
       *     - For `newest`, reviews are sorted in chronological order; the preferred language does not affect the sort order.
       *     Google recommends indicating to users whether results are ordered by `most_relevant` or `newest`.
       *      */
      reviews?: AutocompleteServiceComponents["schemas"]["PlaceReview"][];
      /** @description Specifies if the place serves beer. */
      serves_beer?: boolean;
      /** @description Specifies if the place serves breakfast. */
      serves_breakfast?: boolean;
      /** @description Specifies if the place serves brunch. */
      serves_brunch?: boolean;
      /** @description Specifies if the place serves dinner. */
      serves_dinner?: boolean;
      /** @description Specifies if the place serves lunch. */
      serves_lunch?: boolean;
      /** @description Specifies if the place serves vegetarian food. */
      serves_vegetarian_food?: boolean;
      /** @description Specifies if the place serves wine. */
      serves_wine?: boolean;
      /** @deprecated */
      scope?: string;
      /** @description Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the `type` subfield, which draws from a predefined list of opening hours types (such as `DRIVE_THROUGH`, `PICKUP`, or `TAKEOUT`) based on the types of the place. This field includes the `special_days` subfield of all hours, set for dates that have exceptional hours. */
      secondary_opening_hours?: AutocompleteServiceComponents["schemas"]["PlaceOpeningHours"][];
      /** @description Specifies if the business supports takeout. */
      takeout?: boolean;
      /**
       * @description Contains an array of feature types describing the given result. See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types#table2).
       * @example [
       *       "point_of_interest",
       *       "establishment"
       *     ]
       */
      types?: string[];
      /**
       * @description Contains the URL of the official Google page for this place. This will be the Google-owned page that contains the best available information about the place. Applications must link to or embed this page on any screen that shows detailed results about the place to the user.
       * @example https://maps.google.com/?cid=10281119596374313554
       */
      url?: string;
      /**
       * @description The total number of reviews, with or without text, for this place.
       * @example 931
       */
      user_ratings_total?: number;
      /**
       * @description Contains the number of minutes this place’s current timezone is offset from UTC. For example, for places in Sydney, Australia during daylight saving time this would be 660 (+11 hours from UTC), and for places in California outside of daylight saving time this would be -480 (-8 hours from UTC).
       * @example 600
       */
      utc_offset?: number;
      /**
       * @description For establishment (`types:["establishment", ...])` results only, the `vicinity` field contains a simplified address for the place, including the street name, street number, and locality, but not the province/state, postal code, or country.
       *
       *     For all other results, the `vicinity` field contains the name of the narrowest political (`types:["political", ...]`) feature that is present in the address of the result.
       *
       *     This content is meant to be read as-is. Do not programmatically parse the formatted address.
       *
       * @example 48 Pirrama Road, Pyrmont
       */
      vicinity?: string;
      /**
       * @description The authoritative website for this place, such as a business' homepage.
       * @example http://google.com
       */
      website?: string;
      /** @description Specifies if the place has an entrance that is wheelchair-accessible. */
      wheelchair_accessible_entrance?: boolean;
    };
    /** PlaceAutocompleteMatchedSubstring */
    PlaceAutocompleteMatchedSubstring: {
      /** @description Length of the matched substring in the prediction result text. */
      length: number;
      /** @description Start location of the matched substring in the prediction result text. */
      offset: number;
    };
    /** PlaceAutocompletePrediction */
    PlaceAutocompletePrediction: {
      /**
       * @description Contains the human-readable name for the returned result. For `establishment` results, this is usually the business name. This content is meant to be read as-is. Do not programmatically parse the formatted address.
       * @example Paris, France
       */
      description: string;
      /** @description A list of substrings that describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired. */
      matched_substrings: AutocompleteServiceComponents["schemas"]["PlaceAutocompleteMatchedSubstring"][];
      /** @description A textual identifier that uniquely identifies a place. To retrieve information about the place, pass this identifier in the placeId field of a Places API request. For more information about place IDs, see the [Place IDs](https://developers.google.com/maps/documentation/places/web-service/place-id) overview. */
      place_id?: string;
      /**
       * @deprecated
       * @description See place_id.
       */
      reference?: string;
      /** @description Provides pre-formatted text that can be shown in your autocomplete results. This content is meant to be read as-is. Do not programmatically parse the formatted address. */
      structured_formatting: AutocompleteServiceComponents["schemas"]["PlaceAutocompleteStructuredFormat"];
      /** @description Contains an array of terms identifying each section of the returned description (a section of the description is generally terminated with a comma). Each entry in the array has a `value` field, containing the text of the term, and an `offset` field, defining the start position of this term in the description, measured in Unicode characters. */
      terms: AutocompleteServiceComponents["schemas"]["PlaceAutocompleteTerm"][];
      /** @description Contains an array of types that apply to this place. For example: `[ "political", "locality" ]` or `[ "establishment", "geocode", "beauty_salon" ]`. The array can contain multiple values. Learn more about [Place types](https://developers.google.com/maps/documentation/places/web-service/supported_types).
       *      */
      types?: string[];
      /** @description The straight-line distance in meters from the origin. This field is only returned for requests made with an `origin`. */
      distance_meters?: number;
    };
    /** PlaceAutocompleteStructuredFormat */
    PlaceAutocompleteStructuredFormat: {
      /** @description Contains the main text of a prediction, usually the name of the place. */
      main_text: string;
      /** @description Contains an array with `offset` value and `length`. These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired. */
      main_text_matched_substrings: AutocompleteServiceComponents["schemas"]["PlaceAutocompleteMatchedSubstring"][];
      /** @description Contains the secondary text of a prediction, usually the location of the place. */
      secondary_text?: string;
      /** @description Contains an array with `offset` value and `length`. These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired. */
      secondary_text_matched_substrings?: AutocompleteServiceComponents["schemas"]["PlaceAutocompleteMatchedSubstring"][];
    };
    /** PlaceAutocompleteTerm */
    PlaceAutocompleteTerm: {
      /** @description The text of the term. */
      value: string;
      /** @description Defines the start position of this term in the description, measured in Unicode characters */
      offset: number;
    };
    /**
     * PlaceEditorialSummary
     * @description Contains a summary of the place. A summary is comprised of a textual overview, and also includes the language code for these if applicable. Summary text must be presented as-is and can not be modified or altered.
     */
    PlaceEditorialSummary: {
      /** @description A medium-length textual summary of the place. */
      overview?: string;
      /** @description The language of the previous fields. May not always be present. */
      language?: string;
    };
    /**
     * PlacePhoto
     * @description A photo of a Place. The photo can be accesed via the [Place Photo](https://developers.google.com/places/web-service/photos) API using an url in the following pattern:
     *
     *     ```
     *     https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=photo_reference&key=YOUR_API_KEY
     *     ```
     *
     *     See [Place Photos](https://developers.google.com/places/web-service/photos) for more information.
     *
     */
    PlacePhoto: {
      /** @description The height of the photo. */
      height: number;
      /** @description The width of the photo. */
      width: number;
      /** @description The HTML attributions for the photo. */
      html_attributions: string[];
      /**
       * @description A string used to identify the photo when you perform a Photo request.
       * @example Aap_uEDY1GahdnFHaMArH3g6W4bELCIn9yaZ0XGqh1-G2lX3OwzTExM6g-_0U8qedk5o3R1SmtMK-NMt34dDMcCNnc4DWREX0vQEH9DjvfF70ZPHo3IFbT-TU_oCNCCB3kxe36EsdXeoKEtRH74NueUIeslebZuVeteDpKvpwVqxRpZFVSjS
       */
      photo_reference: string;
    };
    /**
     * PlaceOpeningHours
     * @description An object describing the opening hours of a place.
     */
    PlaceOpeningHours: {
      /** @description A boolean value indicating if the place is open at the current time. */
      open_now?: boolean;
      /** @description An array of opening periods covering seven days, starting from Sunday, in chronological order.
       *      */
      periods?: AutocompleteServiceComponents["schemas"]["PlaceOpeningHoursPeriod"][];
      /** @description An array of up to seven entries corresponding to the next seven days.
       *      */
      special_days?: AutocompleteServiceComponents["schemas"]["PlaceSpecialDay"][];
      /** @description A type string used to identify the type of secondary hours (for example, `DRIVE_THROUGH`, `HAPPY_HOUR`, `DELIVERY`, `TAKEOUT`, `KITCHEN`, `BREAKFAST`, `LUNCH`, `DINNER`, `BRUNCH`, `PICKUP`, `SENIOR_HOURS`). Set for `secondary_opening_hours` only. */
      type?: string;
      /**
       * @description An array of strings describing in human-readable text the hours of the place.
       * @example [
       *       "Monday: 9:00 AM – 5:00 PM",
       *       "Tuesday: 9:00 AM – 5:00 PM",
       *       "Wednesday: 9:00 AM – 5:00 PM",
       *       "Thursday: 9:00 AM – 5:00 PM",
       *       "Friday: 9:00 AM – 5:00 PM",
       *       "Saturday: Closed",
       *       "Sunday: Closed"
       *     ]
       */
      weekday_text?: string[];
    };
    /** PlaceOpeningHoursPeriod */
    PlaceOpeningHoursPeriod: {
      /** @description Contains a pair of day and time objects describing when the place opens. */
      open: AutocompleteServiceComponents["schemas"]["PlaceOpeningHoursPeriodDetail"];
      /** @description May contain a pair of day and time objects describing when the place closes. If a place is always open, the close section will be missing from the response. Clients can rely on always-open being represented as an open period containing day with value `0` and time with value `0000`, and no `close`.
       *      */
      close?: AutocompleteServiceComponents["schemas"]["PlaceOpeningHoursPeriodDetail"];
    };
    /** PlaceOpeningHoursPeriodDetail */
    PlaceOpeningHoursPeriodDetail: {
      /** @description A date expressed in RFC3339 format in the local timezone for the place, for example 2010-12-31. */
      date?: string;
      /** @description A number from 0–6, corresponding to the days of the week, starting on Sunday. For example, 2 means Tuesday. */
      day: number;
      /**
       * @description May contain a time of day in 24-hour hhmm format. Values are in the range 0000–2359. The time will be reported in the place’s time zone.
       * @example 1700
       */
      time: string;
      /** @description True if a given period was truncated due to a seven-day cutoff, where the period starts before midnight on the date of the request and/or ends at or after  midnight on the last day. This property indicates that the period for open or close can extend past this seven-day cutoff. */
      truncated?: boolean;
    };
    /**
     * PlaceReview
     * @description A review of the place submitted by a user.
     */
    PlaceReview: {
      /**
       * @description The name of the user who submitted the review. Anonymous reviews are attributed to "A Google user".
       * @example A Google User
       */
      author_name: string;
      /** @description The URL to the user's Google Maps Local Guides profile, if available. */
      author_url?: string;
      /** @description The URL to the user's profile photo, if available. */
      profile_photo_url?: string;
      /** @description An IETF language code indicating the language of the returned review.
       *     This field contains the main language tag only, and not the secondary tag indicating country or region. For example, all the English reviews are tagged as 'en', and not 'en-AU' or 'en-UK' and so on.
       *     This field is empty if there is only a rating with no review text.
       *      */
      language?: string;
      /** @description An IETF language code indicating the original language of the review. If the review has been translated, then `original_language` != `language`.
       *     This field contains the main language tag only, and not the secondary tag indicating country or region. For example, all the English reviews are tagged as 'en', and not 'en-AU' or 'en-UK' and so on.
       *     This field is empty if there is only a rating with no review text.
       *      */
      original_language?: string;
      /** @description The user's overall rating for this place. This is a whole number, ranging from 1 to 5. */
      rating: number;
      /** @description The time that the review was submitted in text, relative to the current time. */
      relative_time_description: string;
      /** @description The user's review. When reviewing a location with Google Places, text reviews are considered optional. Therefore, this field may be empty. Note that this field may include simple HTML markup. For example, the entity reference `&amp;` may represent an ampersand character. */
      text?: string;
      /** @description The time that the review was submitted, measured in the number of seconds since since midnight, January 1, 1970 UTC. */
      time: number;
      /** @description A boolean value indicating if the review was translated from the original language it was written in.
       *     If a review has been translated, corresponding to a value of true, Google recommends that you indicate this to your users. For example, you can add the following string, “Translated by Google”, to the review.
       *      */
      translated?: boolean;
    };
    /** PlaceSpecialDay */
    PlaceSpecialDay: {
      /** @description A date expressed in RFC3339 format in the local timezone for the place, for example 2010-12-31. */
      date?: string;
      /** @description True if there are exceptional hours for this day. If `true`, this means that there is at least one exception for this day. Exceptions cause different values to occur in the subfields of `current_opening_hours` and `secondary_opening_hours` such as `periods`, `weekday_text`, `open_now`. The exceptions apply to the hours, and the hours are used to generate the other fields. */
      exceptional_hours?: boolean;
    };
    /** PlacesAutocompleteResponse */
    PlacesAutocompleteResponse: {
      /** @description Contains an array of predictions.
       *      */
      predictions: AutocompleteServiceComponents["schemas"]["PlaceAutocompletePrediction"][];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesAutocompleteStatus"];
      /** @description When the service returns a status code other than `OK<`, there may be an additional `error_message` field within the response object. This field contains more detailed information about thereasons behind the given status code. This field is not always returned, and its content is subject to change.
       *      */
      error_message?: string;
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
    };
    /**
     * PlacesAutocompleteStatus
     * @description Status codes returned by service.
     *     - `OK` indicating the API request was successful.
     *     - `ZERO_RESULTS` indicating that the search was successful but returned no results. This may occur if the search was passed a bounds in a remote location.
     *     - `INVALID_REQUEST` indicating the API request was malformed, generally due to the missing `input` parameter.
     *     - `OVER_QUERY_LIMIT` indicating any of the following:
     *       - You have exceeded the QPS limits.
     *       - Billing has not been enabled on your account.
     *       - The monthly $200 credit, or a self-imposed usage cap, has been exceeded.
     *       - The provided method of payment is no longer valid (for example, a credit card has expired).
     *       See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) for more information about how to resolve this error.
     *     - `REQUEST_DENIED` indicating that your request was denied, generally because:
     *       - The request is missing an API key.
     *       - The `key` parameter is invalid.
     *     - `UNKNOWN_ERROR` indicating an unknown error.
     *
     * @enum {string}
     */
    PlacesAutocompleteStatus: "OK" | "ZERO_RESULTS" | "INVALID_REQUEST" | "OVER_QUERY_LIMIT" | "REQUEST_DENIED" | "UNKNOWN_ERROR";
    /** PlacesDetailsResponse */
    PlacesDetailsResponse: {
      /** @description May contain a set of attributions about this listing which must be displayed to the user (some listings may not have attribution). */
      html_attributions: string[];
      /** @description Contains the detailed information about the place requested. */
      result: AutocompleteServiceComponents["schemas"]["Place"];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesDetailsStatus"];
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
    };
    /**
     * PlacesDetailsStatus
     * @description Status codes returned by service.
     *     - `OK` indicating the API request was successful.
     *     - `ZERO_RESULTS` indicating that the referenced location, `place_id`, was valid but no longer refers to a valid result. This may occur if the establishment is no longer in business.
     *     - `NOT_FOUND` indicating that that the referenced location, `place_id`, was not found in the Places database.
     *     - `INVALID_REQUEST` indicating the API request was malformed.
     *     - `OVER_QUERY_LIMIT` indicating any of the following:
     *       - You have exceeded the QPS limits.
     *       - Billing has not been enabled on your account.
     *       - The monthly $200 credit, or a self-imposed usage cap, has been exceeded.
     *       - The provided method of payment is no longer valid (for example, a credit card has expired).
     *       See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) for more information about how to resolve this error.
     *     - `REQUEST_DENIED` indicating that your request was denied, generally because:
     *       - The request is missing an API key.
     *       - The `key` parameter is invalid.
     *     - `UNKNOWN_ERROR` indicating an unknown error.
     *
     * @enum {string}
     */
    PlacesDetailsStatus: "OK" | "ZERO_RESULTS" | "INVALID_REQUEST" | "NOT_FOUND" | "OVER_QUERY_LIMIT" | "REQUEST_DENIED" | "UNKNOWN_ERROR";
    /** PlacesFindPlaceFromTextResponse */
    PlacesFindPlaceFromTextResponse: {
      /** @description Contains an array of Place candidates.
       *     <div class="caution">Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a place_id, then use that Place ID to make a Place Details request.</div>
       *      */
      candidates: AutocompleteServiceComponents["schemas"]["Place"][];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesSearchStatus"];
      /**
       * @description When the service returns a status code other than `OK<`, there may be an additional `error_message` field within the response object. This field contains more detailed information about thereasons behind the given status code. This field is not always returned, and its content is subject to change.
       *
       * @example Error while parsing 'fields' parameter: Unsupported field name 'invalid'.
       */
      error_message?: string;
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
    };
    /** PlacesNearbySearchResponse */
    PlacesNearbySearchResponse: {
      /** @description May contain a set of attributions about this listing which must be displayed to the user (some listings may not have attribution). */
      html_attributions: string[];
      /** @description Contains an array of places.
       *     <div class="caution">Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a `place_id`, then use that Place ID to make a Place Details request.</div>
       *      */
      results: AutocompleteServiceComponents["schemas"]["Place"][];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesSearchStatus"];
      /** @description When the service returns a status code other than `OK<`, there may be an additional `error_message` field within the response object. This field contains more detailed information about thereasons behind the given status code. This field is not always returned, and its content is subject to change.
       *      */
      error_message?: string;
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
      /** @description Contains a token that can be used to return up to 20 additional results. A next_page_token will not be returned if there are no additional results to display. The maximum number of results that can be returned is 60. There is a short delay between when a next_page_token is issued, and when it will become valid.
       *      */
      next_page_token?: string;
    };
    /** PlacesQueryAutocompleteResponse */
    PlacesQueryAutocompleteResponse: {
      /** @description Contains an array of predictions.
       *      */
      predictions: AutocompleteServiceComponents["schemas"]["PlaceAutocompletePrediction"][];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesAutocompleteStatus"];
      /** @description When the service returns a status code other than `OK`, there may be an additional `error_message` field within the response object. This field contains more detailed information about thereasons behind the given status code. This field is not always returned, and its content is subject to change.
       *      */
      error_message?: string;
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
    };
    /**
     * PlacesSearchStatus
     * @description Status codes returned by service.
     *     - `OK` indicating the API request was successful.
     *     - `ZERO_RESULTS` indicating that the search was successful but returned no results. This may occur if the search was passed a `latlng` in a remote location.
     *     - `INVALID_REQUEST` indicating the API request was malformed, generally due to missing required query parameter (`location` or `radius`).
     *     - `OVER_QUERY_LIMIT` indicating any of the following:
     *       - You have exceeded the QPS limits.
     *       - Billing has not been enabled on your account.
     *       - The monthly $200 credit, or a self-imposed usage cap, has been exceeded.
     *       - The provided method of payment is no longer valid (for example, a credit card has expired).
     *       See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) for more information about how to resolve this error.
     *     - `REQUEST_DENIED` indicating that your request was denied, generally because:
     *       - The request is missing an API key.
     *       - The `key` parameter is invalid.
     *     - `UNKNOWN_ERROR` indicating an unknown error.
     *
     * @enum {string}
     */
    PlacesSearchStatus: "OK" | "ZERO_RESULTS" | "INVALID_REQUEST" | "OVER_QUERY_LIMIT" | "REQUEST_DENIED" | "UNKNOWN_ERROR";
    /** PlacesTextSearchResponse */
    PlacesTextSearchResponse: {
      /** @description May contain a set of attributions about this listing which must be displayed to the user (some listings may not have attribution). */
      html_attributions: string[];
      /** @description Contains an array of places.
       *     <div class="caution">Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a `place_id`, then use that Place ID to make a Place Details request.</div>
       *      */
      results: AutocompleteServiceComponents["schemas"]["Place"][];
      /** @description Contains the status of the request, and may contain debugging information to help you track down why the request failed. */
      status: AutocompleteServiceComponents["schemas"]["PlacesSearchStatus"];
      /** @description When the service returns a status code other than `OK<`, there may be an additional `error_message` field within the response object. This field contains more detailed information about thereasons behind the given status code. This field is not always returned, and its content is subject to change.
       *      */
      error_message?: string;
      /** @description When the service returns additional information about the request specification, there may be an additional `info_messages` field within the response object. This field is only returned for successful requests. It may not always be returned, and its content is subject to change.
       *      */
      info_messages?: string[];
      /** @description Contains a token that can be used to return up to 20 additional results. A next_page_token will not be returned if there are no additional results to display. The maximum number of results that can be returned is 60. There is a short delay between when a next_page_token is issued, and when it will become valid.
       *      */
      next_page_token?: string;
    };
  };
  parameters: {
    /** @description The language in which to return results.
     *
     *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
     *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
     *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
     *     * If a name is not available in the preferred language, the API uses the closest match.
     *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
    language: "ar" | "bg" | "bn" | "ca" | "cs" | "da" | "de" | "el" | "en" | "en-AU" | "en-GB" | "es" | "eu" | "fa" | "fi" | "fil" | "fr" | "gl" | "gu" | "hi" | "hr" | "hu" | "id" | "it" | "iw" | "ja" | "kn" | "ko" | "lt" | "lv" | "ml" | "mr" | "nl" | "no" | "pl" | "pt" | "pt-BR" | "pt-PT" | "ro" | "ru" | "sk" | "sl" | "sr" | "sv" | "ta" | "te" | "th" | "tl" | "tr" | "uk" | "vi" | "zh-CN" | "zh-TW";
    /**
     * @description A grouping of places to which you would like to restrict your results. Currently, you can use components to filter by up to 5 countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: `components=country:fr` would restrict your results to places within France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character `|` as a separator. For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results to places within the United States and its unincorporated organized territories.
     *     <div class="note"><strong>Note:</strong> If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend.  You can find code information at <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="blank" class="external">Wikipedia: List of ISO 3166 country codes</a> or the <a href="https://www.iso.org/obp/ui/#search" target="blank" class="external">ISO Online Browsing Platform</a>.</div>
     *
     * @example country:us|country:pr
     */
    places_components: string;
    /** @description
     *     <div class="caution"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href="https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support">Places API fields support</a>.</div>
     *
     *     Use the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.
     *
     *     Fields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.
     *
     *     **Basic**
     *
     *     The Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.
     *
     *     **Contact**
     *
     *     The Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`
     *
     *     **Atmosphere**
     *
     *     The Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.
     *      */
    places_fields: string[];
    /**
     * @description The type of input. This can be one of either `textquery` or `phonenumber`. Phone numbers must be in international format (prefixed by a plus sign ("+"), followed by the country code, then the phone number itself). See [E.164 ITU recommendation](https://en.wikipedia.org/wiki/E.164) for more information.
     *
     * @example textquery
     */
    places_inputtype: "textquery" | "phonenumber";
    /** @description The text string on which to search, for example: "restaurant" or "123 Main Street". This must be a place name, address, or category of establishments.
     *     Any other types of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches
     *     based on this string and order the results based on their perceived relevance.
     *
     *     Explicitly including location information using this parameter may conflict with the location, radius, and rankby parameters, causing unexpected results.
     *
     *     If this parameter is omitted, places with a business_status of CLOSED_TEMPORARILY or CLOSED_PERMANENTLY will not be returned.
     *      */
    places_keyword: string;
    /**
     * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`.
     *
     * @example 40,-110
     */
    "places_location-required": string;
    /**
     * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`.
     *
     *     <div class="note">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>
     *
     * @example 40,-110
     */
    "places_location-weighted": string;
    /**
     * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`. The `radius` parameter must also be provided when specifying a location. If `radius` is not provided, the `location` parameter is ignored.
     *
     *     <div class="note">When using the Text Search API, the `location` parameter may be overriden if the `query` contains an explicit location such as `Market in Barcelona`.</div>
     *
     * @example 40,-110
     */
    places_location: string;
    /** @description Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.
     *     - IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).
     *     - Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.
     *     - Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.
     *      */
    places_locationbias: string;
    /** @description Restrict results to a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle.
     *     - Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.
     *     - Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.
     *      */
    places_locationrestriction: string;
    /** @description Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.
     *      */
    places_maxheight: number;
    /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
     *      */
    places_maxprice: 0 | 1 | 2 | 3 | 4;
    /** @description Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.
     *      */
    places_maxwidth: number;
    /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
     *      */
    places_minprice: 0 | 1 | 2 | 3 | 4;
    /**
     * @deprecated
     * @description Equivalent to `keyword`. Values in this field are combined with values in the `keyword` field and passed as part of the same search string.
     *
     */
    places_name: string;
    /**
     * @description The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.
     *
     * @example 3
     */
    places_offset: number;
    /** @description Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.
     *      */
    places_opennow: boolean;
    /**
     * @description The origin point from which to calculate straight-line distance to the destination (returned as `distance_meters`). If this value is omitted, straight-line distance will not be returned. Must be specified as `latitude,longitude`.
     *
     * @example 40,-110
     */
    places_origin: string;
    /** @description Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.
     *      */
    places_pagetoken: string;
    /** @description A string identifier that uniquely identifies a photo. Photo references are returned from either a Place Search or Place Details request.
     *      */
    places_photo_reference: string;
    /**
     * @description A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).
     *     For more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).
     *
     * @example ChIJN1t_tDeuEmsRUsoyG83frY4
     */
    places_place_id: string;
    /**
     * @description The text string on which to search, for example: "restaurant" or "123 Main Street". This must a place name, address, or category of establishments. Any other types
     *     of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches based on this string and order
     *     the results based on their perceived relevance.
     *
     * @example restaurants in Sydney
     */
    places_query: string;
    /**
     * @description Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.
     *
     *     The radius will automatically be clamped to a maximum value depending on the type of search and other parameters.
     *
     *     * Autocomplete: 50,000 meters
     *     * Nearby Search:
     *       * with `keyword` or `name`: 50,000 meters
     *       * without `keyword` or `name`
     *         * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.
     *         * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.
     *     * Query Autocomplete: 50,000 meters
     *     * Text Search: 50,000 meters
     *
     * @example 1000
     */
    places_radius: number;
    /** @description Specifies the order in which results are listed. Possible values are:
     *     - `prominence` (default). This option sorts results based on their importance. Ranking will favor prominent places within the set radius over nearby places that match but that are less prominent. Prominence can be affected by a place's ranking in Google's index, global popularity, and other factors. When prominence is specified, the `radius` parameter is required.
     *     - `distance`. This option biases search results in ascending order by their distance from the specified location. When `distance` is specified, one or more of `keyword`, `name`, or `type` is required and `radius` is disallowed.
     *      */
    places_rankby: "prominence" | "distance";
    /** @description
     *     Specify `reviews_no_translations=true` to disable translation of reviews; specify `reviews_no_translations=false` to enable translation of reviews. Reviews are returned in their original language.
     *
     *     If omitted, or passed with no value, translation of reviews is enabled. If the `language` parameter was specified in the request, use the specified language as the preferred language for translation. If `language` is omitted, the API attempts to use the `Accept-Language` header as the preferred language.
     *      */
    places_reviewnotranslation: boolean;
    /** @description The sorting method to use when returning reviews. Can be set to `most_relevant` (default) or `newest`.
     *
     *     - For `most_relevant` (default), reviews are sorted by relevance; the service will bias the results to return reviews originally written in the preferred language.
     *     - For `newest`, reviews are sorted in chronological order; the preferred language does not affect the sort order.
     *
     *     Google recommends that you display how the reviews are being sorted to the end user.
     *      */
    places_reviewsort: string;
    /** @description A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.
     *
     *     The session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).
     *
     *     We recommend the following guidelines:
     *
     *     - Use session tokens for all autocomplete sessions.
     *     - Generate a fresh token for each session. Using a version 4 UUID is recommended.
     *     - Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.
     *     - Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.
     *      */
    places_sessiontoken: string;
    /** @description Returns only those places that are strictly within the region defined by `location` and `radius`. This is a restriction, rather than a bias, meaning that results outside this region will not be returned even if they match the user input.
     *      */
    places_strictbounds: boolean;
    /** @description Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.
     *
     *     * `type=hospital|pharmacy|doctor` becomes `type=hospital`
     *     * `type=hospital,pharmacy,doctor` is ignored entirely
     *
     *     See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).
     *     <div class="note">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>
     *      */
    places_type: string;
    /** @description You can restrict results from a Place Autocomplete request to be of a certain type by passing the `types` parameter. This parameter specifies a type or a type collection, as listed in [Place Types](/maps/documentation/places/web-service/supported_types). If nothing is specified, all types are returned.
     *
     *     For the value of the `types` parameter you can specify either:
     *     * Up to five values from [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2). For multiple values, separate each value with a `|` (vertical bar). For example:
     *
     *       `types=book_store|cafe`
     *
     *     * Any supported filter in [Table 3](/maps/documentation/places/web-service/supported_types#table3). You can safely mix the `geocode` and `establishment` types. You cannot mix type collections (`address`, `(cities)` or `(regions)`) with any other type, or an error occurs.
     *
     *     The request will be rejected with an `INVALID_REQUEST` error if:
     *
     *     * More than five types are specified.
     *     * Any unrecognized types are present.
     *     * Any types from in [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2) are mixed with any of the filters in [Table 3](/maps/documentation/places/web-service/supported_types#table3).
     *      */
    places_types: string;
    /** @description The region code, specified as a [ccTLD ("top-level domain")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is "uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the entity of "The United Kingdom of Great Britain and Northern Ireland"). */
    region: "ac" | "ad" | "ae" | "af" | "ag" | "ai" | "al" | "am" | "an" | "ao" | "aq" | "ar" | "as" | "at" | "au" | "aw" | "ax" | "az" | "ba" | "bb" | "bd" | "be" | "bf" | "bg" | "bh" | "bi" | "bj" | "bl" | "bm" | "bn" | "bo" | "bq" | "br" | "bs" | "bt" | "bv" | "bw" | "by" | "bz" | "ca" | "cc" | "cd" | "cf" | "cg" | "ch" | "ci" | "ck" | "cl" | "cm" | "cn" | "co" | "cr" | "cu" | "cv" | "cw" | "cx" | "cy" | "cz" | "de" | "dj" | "dk" | "dm" | "do" | "dz" | "ec" | "ee" | "eg" | "eh" | "en" | "er" | "es" | "et" | "eu" | "fi" | "fj" | "fk" | "fm" | "fo" | "fr" | "ga" | "gb" | "gd" | "ge" | "gf" | "gg" | "gh" | "gi" | "gl" | "gm" | "gn" | "gp" | "gq" | "gr" | "gs" | "gt" | "gu" | "gw" | "gy" | "hk" | "hm" | "hn" | "hr" | "ht" | "hu" | "id" | "ie" | "il" | "im" | "in" | "io" | "iq" | "ir" | "is" | "it" | "je" | "jm" | "jo" | "jp" | "ke" | "kg" | "kh" | "ki" | "km" | "kn" | "kp" | "kr" | "kw" | "ky" | "kz" | "la" | "lb" | "lc" | "li" | "lk" | "lr" | "ls" | "lt" | "lu" | "lv" | "ly" | "ma" | "mc" | "md" | "me" | "mf" | "mg" | "mh" | "mk" | "ml" | "mm" | "mn" | "mo" | "mp" | "mq" | "mr" | "ms" | "mt" | "mu" | "mv" | "mw" | "mx" | "my" | "mz" | "na" | "nc" | "ne" | "nf" | "ng" | "ni" | "nl" | "no" | "np" | "nr" | "nu" | "nz" | "om" | "pa" | "pe" | "pf" | "pg" | "ph" | "pk" | "pl" | "pm" | "pn" | "pr" | "ps" | "pt" | "pw" | "py" | "qa" | "re" | "ro" | "rs" | "ru" | "rw" | "sa" | "sb" | "sc" | "sd" | "se" | "sg" | "sh" | "si" | "sj" | "sk" | "sl" | "sm" | "sn" | "so" | "sr" | "ss" | "st" | "su" | "sv" | "sx" | "sy" | "sz" | "tc" | "td" | "tf" | "tg" | "th" | "tj" | "tk" | "tl" | "tm" | "tn" | "to" | "tp" | "tr" | "tt" | "tv" | "tw" | "tz" | "ua" | "ug" | "uk" | "um" | "us" | "uy" | "uz" | "va" | "vc" | "ve" | "vg" | "vi" | "vn" | "vu" | "wf" | "ws" | "ye" | "yt" | "za" | "zm" | "zw";
  };
}

export interface AutocompleteServiceOperations {
  placeDetails: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /**
         * @description A textual identifier that uniquely identifies a place, returned from a [Place Search](https://developers.google.com/maps/documentation/places/web-service/search).
         *     For more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).
         *
         * @example ChIJN1t_tDeuEmsRUsoyG83frY4
         */
        place_id: AutocompleteServiceComponents["parameters"]["places_place_id"];
        /** @description
         *     <div class="caution"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href="https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support">Places API fields support</a>.</div>
         *
         *     Use the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.
         *
         *     Fields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.
         *
         *     **Basic**
         *
         *     The Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.
         *
         *     **Contact**
         *
         *     The Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`
         *
         *     **Atmosphere**
         *
         *     The Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.
         *      */
        fields?: AutocompleteServiceComponents["parameters"]["places_fields"];
        /** @description A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.
         *
         *     The session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).
         *
         *     We recommend the following guidelines:
         *
         *     - Use session tokens for all autocomplete sessions.
         *     - Generate a fresh token for each session. Using a version 4 UUID is recommended.
         *     - Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.
         *     - Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.
         *      */
        sessiontoken?: AutocompleteServiceComponents["parameters"]["places_sessiontoken"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
        /** @description The region code, specified as a [ccTLD ("top-level domain")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is "uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the entity of "The United Kingdom of Great Britain and Northern Ireland"). */
        region?: AutocompleteServiceComponents["parameters"]["region"];
        /** @description The sorting method to use when returning reviews. Can be set to `most_relevant` (default) or `newest`.
         *
         *     - For `most_relevant` (default), reviews are sorted by relevance; the service will bias the results to return reviews originally written in the preferred language.
         *     - For `newest`, reviews are sorted in chronological order; the preferred language does not affect the sort order.
         *
         *     Google recommends that you display how the reviews are being sorted to the end user.
         *      */
        reviews_sort?: AutocompleteServiceComponents["parameters"]["places_reviewsort"];
        /** @description
         *     Specify `reviews_no_translations=true` to disable translation of reviews; specify `reviews_no_translations=false` to enable translation of reviews. Reviews are returned in their original language.
         *
         *     If omitted, or passed with no value, translation of reviews is enabled. If the `language` parameter was specified in the request, use the specified language as the preferred language for translation. If `language` is omitted, the API attempts to use the `Accept-Language` header as the preferred language.
         *      */
        reviews_no_translations?: AutocompleteServiceComponents["parameters"]["places_reviewnotranslation"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesDetailsResponse"];
      };
    };
  }>;
  findPlaceFromText: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /** @description
         *     <div class="caution"> Caution: Place Search requests and Place Details requests do not return the same fields. Place Search requests return a subset of the fields that are returned by Place Details requests. If the field you want is not returned by Place Search, you can use Place Search to get a <code>place_id</code>, then use that Place ID to make a Place Details request. For more information on the fields that are unavailable in a Place Search request, see <a href="https://developers.google.com/maps/documentation/places/web-service/place-data-fields#places-api-fields-support">Places API fields support</a>.</div>
         *
         *     Use the fields parameter to specify a comma-separated list of place data types to return. For example: `fields=formatted_address,name,geometry`. Use a forward slash when specifying compound values. For example: `opening_hours/open_now`.
         *
         *     Fields are divided into three billing categories: Basic, Contact, and Atmosphere. Basic fields are billed at base rate, and incur no additional charges. Contact and Atmosphere fields are billed at a higher rate. See the [pricing sheet](https://developers.google.com/maps/documentation/places/web-service/usage-and-billing/) for more information. Attributions, `html_attributions`, are always returned with every call, regardless of whether the field has been requested.
         *
         *     **Basic**
         *
         *     The Basic category includes the following fields: `address_components`, `adr_address`, `business_status`, `formatted_address`, `geometry`, `icon`, `icon_mask_base_uri`, `icon_background_color`, `name`, `permanently_closed` ([deprecated](https://developers.google.com/maps/deprecations)), `photo`, `place_id`, `plus_code`, `type`, `url`, `utc_offset`, `vicinity`, `wheelchair_accessible_entrance`.
         *
         *     **Contact**
         *
         *     The Contact category includes the following fields: `current_opening_hours`, `formatted_phone_number`, `international_phone_number`, `opening_hours`, `secondary_opening_hours`, `website`
         *
         *     **Atmosphere**
         *
         *     The Atmosphere category includes the following fields: `curbside_pickup`, `delivery`, `dine_in`, `editorial_summary`, `price_level`, `rating`, `reservable`, `reviews`, `serves_beer`, `serves_breakfast`, `serves_brunch`, `serves_dinner`, `serves_lunch`, `serves_vegetarian_food`, `serves_wine`, `takeout`, `user_ratings_total`.
         *      */
        fields?: AutocompleteServiceComponents["parameters"]["places_fields"];
        /**
         * @description The text string on which to search, for example: "restaurant" or "123 Main Street". This must be a place name, address, or category of establishments. Any other types of input can generate errors
         *     and are not guaranteed to return valid results. The Places API will return candidate matches based on this string and order the results based on their perceived relevance.
         *
         * @example Museum of Contemporary Art Australia
         */
        input: string;
        /**
         * @description The type of input. This can be one of either `textquery` or `phonenumber`. Phone numbers must be in international format (prefixed by a plus sign ("+"), followed by the country code, then the phone number itself). See [E.164 ITU recommendation](https://en.wikipedia.org/wiki/E.164) for more information.
         *
         * @example textquery
         */
        inputtype: AutocompleteServiceComponents["parameters"]["places_inputtype"];
        /** @description Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.
         *     - IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).
         *     - Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.
         *     - Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.
         *      */
        locationbias?: AutocompleteServiceComponents["parameters"]["places_locationbias"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesFindPlaceFromTextResponse"];
      };
    };
  }>;
  nearbySearch: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /** @description The text string on which to search, for example: "restaurant" or "123 Main Street". This must be a place name, address, or category of establishments.
         *     Any other types of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches
         *     based on this string and order the results based on their perceived relevance.
         *
         *     Explicitly including location information using this parameter may conflict with the location, radius, and rankby parameters, causing unexpected results.
         *
         *     If this parameter is omitted, places with a business_status of CLOSED_TEMPORARILY or CLOSED_PERMANENTLY will not be returned.
         *      */
        keyword?: AutocompleteServiceComponents["parameters"]["places_keyword"];
        /**
         * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`.
         *
         * @example 40,-110
         */
        location: AutocompleteServiceComponents["parameters"]["places_location-required"];
        /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
         *      */
        maxprice?: AutocompleteServiceComponents["parameters"]["places_maxprice"];
        /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
         *      */
        minprice?: AutocompleteServiceComponents["parameters"]["places_minprice"];
        /**
         * @deprecated
         * @description Equivalent to `keyword`. Values in this field are combined with values in the `keyword` field and passed as part of the same search string.
         *
         */
        name?: AutocompleteServiceComponents["parameters"]["places_name"];
        /** @description Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.
         *      */
        opennow?: AutocompleteServiceComponents["parameters"]["places_opennow"];
        /** @description Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.
         *      */
        pagetoken?: AutocompleteServiceComponents["parameters"]["places_pagetoken"];
        /** @description Specifies the order in which results are listed. Possible values are:
         *     - `prominence` (default). This option sorts results based on their importance. Ranking will favor prominent places within the set radius over nearby places that match but that are less prominent. Prominence can be affected by a place's ranking in Google's index, global popularity, and other factors. When prominence is specified, the `radius` parameter is required.
         *     - `distance`. This option biases search results in ascending order by their distance from the specified location. When `distance` is specified, one or more of `keyword`, `name`, or `type` is required and `radius` is disallowed.
         *      */
        rankby?: AutocompleteServiceComponents["parameters"]["places_rankby"];
        /**
         * @description Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.
         *
         *     The radius will automatically be clamped to a maximum value depending on the type of search and other parameters.
         *
         *     * Autocomplete: 50,000 meters
         *     * Nearby Search:
         *       * with `keyword` or `name`: 50,000 meters
         *       * without `keyword` or `name`
         *         * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.
         *         * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.
         *     * Query Autocomplete: 50,000 meters
         *     * Text Search: 50,000 meters
         *
         * @example 1000
         */
        radius: AutocompleteServiceComponents["parameters"]["places_radius"];
        /** @description Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.
         *
         *     * `type=hospital|pharmacy|doctor` becomes `type=hospital`
         *     * `type=hospital,pharmacy,doctor` is ignored entirely
         *
         *     See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).
         *     <div class="note">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>
         *      */
        type?: AutocompleteServiceComponents["parameters"]["places_type"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesNearbySearchResponse"];
      };
    };
  }>;
  textSearch: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /**
         * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`.
         *
         *     <div class="note">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>
         *
         * @example 40,-110
         */
        location?: AutocompleteServiceComponents["parameters"]["places_location-weighted"];
        /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
         *      */
        maxprice?: AutocompleteServiceComponents["parameters"]["places_maxprice"];
        /** @description Restricts results to only those places within the specified range. Valid values range between 0 (most affordable) to 4 (most expensive), inclusive. The exact amount indicated by a specific value will vary from region to region.
         *      */
        minprice?: AutocompleteServiceComponents["parameters"]["places_minprice"];
        /** @description Returns only those places that are open for business at the time the query is sent. Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.
         *      */
        opennow?: AutocompleteServiceComponents["parameters"]["places_opennow"];
        /** @description Returns up to 20 results from a previously run search. Setting a `pagetoken` parameter will execute a search with the same parameters used previously — all parameters other than pagetoken will be ignored.
         *      */
        pagetoken?: AutocompleteServiceComponents["parameters"]["places_pagetoken"];
        /**
         * @description The text string on which to search, for example: "restaurant" or "123 Main Street". This must a place name, address, or category of establishments. Any other types
         *     of input can generate errors and are not guaranteed to return valid results. The Google Places service will return candidate matches based on this string and order
         *     the results based on their perceived relevance.
         *
         * @example restaurants in Sydney
         */
        query: AutocompleteServiceComponents["parameters"]["places_query"];
        /**
         * @description Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.
         *
         *     The radius will automatically be clamped to a maximum value depending on the type of search and other parameters.
         *
         *     * Autocomplete: 50,000 meters
         *     * Nearby Search:
         *       * with `keyword` or `name`: 50,000 meters
         *       * without `keyword` or `name`
         *         * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.
         *         * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.
         *     * Query Autocomplete: 50,000 meters
         *     * Text Search: 50,000 meters
         *
         * @example 1000
         */
        radius: AutocompleteServiceComponents["parameters"]["places_radius"];
        /** @description Restricts the results to places matching the specified type. Only one type may be specified. If more than one type is provided, all types following the first entry are ignored.
         *
         *     * `type=hospital|pharmacy|doctor` becomes `type=hospital`
         *     * `type=hospital,pharmacy,doctor` is ignored entirely
         *
         *     See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types).
         *     <div class="note">Note: Adding both `keyword` and `type` with the same value (`keyword=cafe&type=cafe` or `keyword=parking&type=parking`) can yield `ZERO_RESULTS`.</div>
         *      */
        type?: AutocompleteServiceComponents["parameters"]["places_type"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
        /** @description The region code, specified as a [ccTLD ("top-level domain")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is "uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the entity of "The United Kingdom of Great Britain and Northern Ireland"). */
        region?: AutocompleteServiceComponents["parameters"]["region"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesTextSearchResponse"];
      };
    };
  }>;
  placePhoto: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /** @description A string identifier that uniquely identifies a photo. Photo references are returned from either a Place Search or Place Details request.
         *      */
        photo_reference: AutocompleteServiceComponents["parameters"]["places_photo_reference"];
        /** @description Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.
         *      */
        maxheight?: AutocompleteServiceComponents["parameters"]["places_maxheight"];
        /** @description Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between `1` and `1600`.
         *      */
        maxwidth?: AutocompleteServiceComponents["parameters"]["places_maxwidth"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: Blob;
      };
    };
  }>;
  queryAutocomplete: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /** @description The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.
         *      */
        input: string;
        /**
         * @description The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.
         *
         * @example 3
         */
        offset?: AutocompleteServiceComponents["parameters"]["places_offset"];
        /**
         * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`.
         *
         *     <div class="note">The <code>location</code> parameter may be overriden if the <code>query</code> contains an explicit location such as <code>Market in Barcelona</code>. Using quotes around the query may also influence the weight given to the <code>location</code> and <code>radius</code>.</div>
         *
         * @example 40,-110
         */
        location?: AutocompleteServiceComponents["parameters"]["places_location-weighted"];
        /**
         * @description Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.
         *
         *     The radius will automatically be clamped to a maximum value depending on the type of search and other parameters.
         *
         *     * Autocomplete: 50,000 meters
         *     * Nearby Search:
         *       * with `keyword` or `name`: 50,000 meters
         *       * without `keyword` or `name`
         *         * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.
         *         * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.
         *     * Query Autocomplete: 50,000 meters
         *     * Text Search: 50,000 meters
         *
         * @example 1000
         */
        radius: AutocompleteServiceComponents["parameters"]["places_radius"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesQueryAutocompleteResponse"];
      };
    };
  }>;
  autocomplete: HttpSchema.Method<{
    request: {
      searchParams: HttpSearchParamsSerialized<{
        /** @description The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.
         *      */
        input: string;
        /** @description A random string which identifies an autocomplete [session](https://developers.google.com/maps/documentation/places/web-service/details#session_tokens) for billing purposes.
         *
         *     The session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the `sessiontoken` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).
         *
         *     We recommend the following guidelines:
         *
         *     - Use session tokens for all autocomplete sessions.
         *     - Generate a fresh token for each session. Using a version 4 UUID is recommended.
         *     - Ensure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.
         *     - Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.
         *      */
        sessiontoken?: AutocompleteServiceComponents["parameters"]["places_sessiontoken"];
        /**
         * @description A grouping of places to which you would like to restrict your results. Currently, you can use components to filter by up to 5 countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: `components=country:fr` would restrict your results to places within France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character `|` as a separator. For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results to places within the United States and its unincorporated organized territories.
         *     <div class="note"><strong>Note:</strong> If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend.  You can find code information at <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="blank" class="external">Wikipedia: List of ISO 3166 country codes</a> or the <a href="https://www.iso.org/obp/ui/#search" target="blank" class="external">ISO Online Browsing Platform</a>.</div>
         *
         * @example country:us|country:pr
         */
        components?: AutocompleteServiceComponents["parameters"]["places_components"];
        /** @description Returns only those places that are strictly within the region defined by `location` and `radius`. This is a restriction, rather than a bias, meaning that results outside this region will not be returned even if they match the user input.
         *      */
        strictbounds?: AutocompleteServiceComponents["parameters"]["places_strictbounds"];
        /**
         * @description The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is `Google` and the offset is 3, the service will match on `Goo`. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is `Google abc` and the offset is 3, the service will attempt to match against `Goo abc`. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.
         *
         * @example 3
         */
        offset?: AutocompleteServiceComponents["parameters"]["places_offset"];
        /**
         * @description The origin point from which to calculate straight-line distance to the destination (returned as `distance_meters`). If this value is omitted, straight-line distance will not be returned. Must be specified as `latitude,longitude`.
         *
         * @example 40,-110
         */
        origin?: AutocompleteServiceComponents["parameters"]["places_origin"];
        /**
         * @description The point around which to retrieve place information. This must be specified as `latitude,longitude`. The `radius` parameter must also be provided when specifying a location. If `radius` is not provided, the `location` parameter is ignored.
         *
         *     <div class="note">When using the Text Search API, the `location` parameter may be overriden if the `query` contains an explicit location such as `Market in Barcelona`.</div>
         *
         * @example 40,-110
         */
        location?: AutocompleteServiceComponents["parameters"]["places_location"];
        /** @description Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.
         *     - IP bias: Instructs the API to use IP address biasing. Pass the string `ipbias` (this option has no additional parameters).
         *     - Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.
         *     - Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.
         *      */
        locationbias?: AutocompleteServiceComponents["parameters"]["places_locationbias"];
        /** @description Restrict results to a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle.
         *     - Circular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: `circle:radius@lat,lng`.
         *     - Rectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:`rectangle:south,west|north,east`. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.
         *      */
        locationrestriction?: AutocompleteServiceComponents["parameters"]["places_locationrestriction"];
        /**
         * @description Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a `location` and a `radius` parameter. Doing so instructs the Places service to _prefer_ showing results within that circle; results outside of the defined area may still be displayed.
         *
         *     The radius will automatically be clamped to a maximum value depending on the type of search and other parameters.
         *
         *     * Autocomplete: 50,000 meters
         *     * Nearby Search:
         *       * with `keyword` or `name`: 50,000 meters
         *       * without `keyword` or `name`
         *         * Up to 50,000 meters, adjusted dynamically based on area density, independent of `rankby` parameter.
         *         * When using `rankby=distance`, the radius parameter will not be accepted, and will result in an `INVALID_REQUEST`.
         *     * Query Autocomplete: 50,000 meters
         *     * Text Search: 50,000 meters
         *
         * @example 1000
         */
        radius: AutocompleteServiceComponents["parameters"]["places_radius"];
        /** @description You can restrict results from a Place Autocomplete request to be of a certain type by passing the `types` parameter. This parameter specifies a type or a type collection, as listed in [Place Types](/maps/documentation/places/web-service/supported_types). If nothing is specified, all types are returned.
         *
         *     For the value of the `types` parameter you can specify either:
         *     * Up to five values from [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2). For multiple values, separate each value with a `|` (vertical bar). For example:
         *
         *       `types=book_store|cafe`
         *
         *     * Any supported filter in [Table 3](/maps/documentation/places/web-service/supported_types#table3). You can safely mix the `geocode` and `establishment` types. You cannot mix type collections (`address`, `(cities)` or `(regions)`) with any other type, or an error occurs.
         *
         *     The request will be rejected with an `INVALID_REQUEST` error if:
         *
         *     * More than five types are specified.
         *     * Any unrecognized types are present.
         *     * Any types from in [Table 1](/maps/documentation/places/web-service/supported_types#table1) or [Table 2](/maps/documentation/places/web-service/supported_types#table2) are mixed with any of the filters in [Table 3](/maps/documentation/places/web-service/supported_types#table3).
         *      */
        types?: AutocompleteServiceComponents["parameters"]["places_types"];
        /** @description The language in which to return results.
         *
         *     * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive.
         *     * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header.
         *     * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.
         *     * If a name is not available in the preferred language, the API uses the closest match.
         *     * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _tér_ are synonyms for street in Hungarian. */
        language?: AutocompleteServiceComponents["parameters"]["language"];
        /** @description The region code, specified as a [ccTLD ("top-level domain")](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains) two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is "uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the entity of "The United Kingdom of Great Britain and Northern Ireland"). */
        region?: AutocompleteServiceComponents["parameters"]["region"];
      }>;
    };
    response: {
      /** @description 200 OK */
      200: {
        body: AutocompleteServiceComponents["schemas"]["PlacesAutocompleteResponse"];
      };
    };
  }>;
}
